/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package weather;

import com.google.common.base.Charsets;
import com.google.common.io.Files;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.*;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.sql.*;

class Place {
    int _id;
    int id;
    int pid;
    String city_code;
    String city_name;

    @Override
    public String toString() {
        return "city_code:" + this.city_code + " " + "city_name:" + this.city_name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getPid() {
        return pid;
    }

    public void setPid(int pid) {
        this.pid = pid;
    }
    
    public String getCitycode() {
        return city_code;
    }

    public void setCitycode(String city_code) {
        this.city_code = city_code;
    }

    public String getCityname() {
        return city_name;
    }

    public void setCityname(String city_name) {
        this.city_name = city_name;
    }
}

public class App {

    public List<Place> getProvinces() {
        Gson gson = new GsonBuilder().create();

        Map<Place, List<Place>> cmap = new HashMap<>();

        String fileName = "_city.json";

        List<Place> provinces = new ArrayList<>();
        
        InputStream in = App.class.getClassLoader().getResourceAsStream(fileName);
        
        //String content = Files.toString(new File(fileName), Charsets.UTF_8);
        StringBuilder sb = new StringBuilder();
        String line;

        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        String content = sb.toString();
        //-----------------------------

        Place[] places = gson.fromJson(content, Place[].class);
        
        Arrays.stream(places).forEach( e -> {
            if (e.pid == 0) {
                provinces.add(e);
            }
        });

        for (Place p : provinces) {
            List<Place> cities = new ArrayList<>();
            for (int i=0; i<places.length; i++) {
                if (places[i].pid == p.id) {
                    cities.add(places[i]);
                }
            }
            cmap.put(p, cities);
        }

        return provinces;
    }

    public static void main(String[] args) throws IOException {

        ProvService provService;

        List<Place> provinces = getProvinces();
        
        for (Map.Entry<Place, List<Place>> c: cmap.entrySet()) {
            Place k = cmap.getKey();
            Province province = new Province();
            province.setId(k.getId());
            province.setName(k.getCityname());

            for (Place x: c.getValue()) {
                City city = new City();
                city.setCode(x.getCitycode());
                city.setName(x.getCityname());
                province.addCity(city);
            }
        }

    }
}
